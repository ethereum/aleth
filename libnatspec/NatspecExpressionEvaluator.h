/*
	This file is part of cpp-ethereum.

	cpp-ethereum is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation, either version 3 of the License, or
	(at your option) any later version.

	cpp-ethereum is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with cpp-ethereum.  If not, see <http://www.gnu.org/licenses/>.
 */
/** @file NatspecExpressionEvaluator.h
 * @author Marek Kotewicz <marek@ethdev.com>
 * @date 2015
 */

#pragma once
#include <string>

namespace dev { namespace eth { class NatspecResources; }}

/**
 * Dumb class created to prevent including autogenerated
 * "NatspecResources.hpp" file in header, cause it's error prone.
 */
class NatspecResourcesLoader
{
public:
	NatspecResourcesLoader();
	~NatspecResourcesLoader();
	std::string loadNatspec() const;

private:
	dev::eth::NatspecResources* m_resources;
};

/**
 * Should be used to evaluate natspec expression.
 * @see test/natspec.cpp for natspec expression examples
 */
template<typename Engine, typename Printer>
class NatspecExpressionEvaluator
{
public:
	/// Construct natspec expression evaluator
	/// @params abi - contract's abi in json format, passed as string
	/// @params transaction - json object containing transaction data
	/// @params method - name of the contract's method for which we evaluate the natspec.
	/// javascript valid objects
	NatspecExpressionEvaluator(
			std::string const& _abi = "[]",
			std::string const& _transaction = "{}",
			std::string const& _method = ""
			):
		m_abi(_abi),
		m_transaction(_transaction),
		m_method(_method)
	{
		NatspecResourcesLoader res;
		std::string natspec = res.loadNatspec();
		m_engine.eval(natspec);
	}

	/// Should be called to evaluate natspec expression
	/// @params expression - natspec expression
	/// @returns evaluated natspec expression if it was valid, otherwise original expression
	std::string evalExpression(std::string const& _expression)
	{
		std::string call = "";
		if (!m_abi.empty() && !m_transaction.empty() && !m_method.empty())
			call = ", {abi:" + m_abi + ", transaction:" + m_transaction + ", method: '" + m_method + "' }";

		auto value = m_engine.eval("natspec.evaluateExpressionSafe(\"" + _expression + "\"" + call + ")");
		return m_printer.print(value).c_str();
	}
	
private:
	Engine m_engine;
	Printer m_printer;
	std::string m_abi;
	std::string m_transaction;
	std::string m_method;
};
