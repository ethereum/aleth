cmake_policy(SET CMP0015 NEW)

aux_source_directory(. SRC_LIST)
list(REMOVE_ITEM SRC_LIST "./createRandomTest.cpp")

include_directories(..)
include_directories(${CRYPTOPP_INCLUDE_DIRS})
include_directories(${JSONCPP_INCLUDE_DIRS})

file(GLOB HEADERS "*.h")
add_executable(testeth ${SRC_LIST} ${HEADERS})
add_executable(createRandomTest createRandomTest.cpp vm.cpp TestHelper.cpp)


target_link_libraries(testeth ethereum)
target_link_libraries(testeth ethcore)
target_link_libraries(testeth secp256k1)
target_link_libraries(testeth gmp)
target_link_libraries(testeth solidity)
target_link_libraries(testeth webthree)

target_link_libraries(testeth ${CRYPTOPP_LIBRARIES})

if(JSON_RPC_CPP_FOUND)
    target_link_libraries(testeth ${JSONCPP_LIBRARIES})
	target_link_libraries(testeth web3jsonrpc)
endif()

target_link_libraries(createRandomTest ethereum)
target_link_libraries(createRandomTest ethcore)
target_link_libraries(createRandomTest boost_chrono)
target_link_libraries(createRandomTest boost_unit_test_framework)
target_link_libraries(createRandomTest ${CRYPTOPP_LIBRARIES})

if ("${TARGET_PLATFORM}" STREQUAL "w64")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libgcc -static-libstdc++")
	target_link_libraries(testeth boost_system-mt-s)
	target_link_libraries(testeth boost_filesystem-mt-s)
	target_link_libraries(testeth boost_thread_win32-mt-s)
	target_link_libraries(testeth gcc)
	target_link_libraries(testeth gdi32)
	target_link_libraries(testeth ws2_32)
	target_link_libraries(testeth mswsock)
	target_link_libraries(testeth shlwapi)
	target_link_libraries(testeth iphlpapi)
	set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS)
elseif (UNIX)
	find_package(Boost 1.53 REQUIRED COMPONENTS unit_test_framework)
else ()
	target_link_libraries(testeth boost_system)
	target_link_libraries(testeth boost_filesystem)	
	find_package(Threads REQUIRED)
	target_link_libraries(testeth ${CMAKE_THREAD_LIBS_INIT})
endif ()
