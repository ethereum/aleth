{
  "version": 3,
  "sources": [
    "node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "lib/solidity/abi.js",
    "lib/solidity/formatters.js",
    "lib/solidity/types.js",
    "lib/utils/config.js",
    "lib/utils/utils.js",
    "lib/web3.js",
    "lib/web3/contract.js",
    "lib/web3/db.js",
    "lib/web3/eth.js",
    "lib/web3/event.js",
    "lib/web3/filter.js",
    "lib/web3/formatters.js",
    "lib/web3/httpprovider.js",
    "lib/web3/jsonrpc.js",
    "lib/web3/net.js",
    "lib/web3/qtsync.js",
    "lib/web3/requestmanager.js",
    "lib/web3/shh.js",
    "lib/web3/signature.js",
    "lib/web3/watches.js",
    "version.json",
    "index.js"
  ],
  "names": [],
  "mappingsrtvhcnPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACprJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjjjDA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file abi.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n *   Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar utils = require('../utils/utils');\nvar c = require('../utils/config');\nvar types = require('./types');\nvar f = require('./formatters');\n\n/**\n * throw incorrect type error\n *\n * @method throwTypeError\n * @param {String} type\n * @throws incorrect type error\n */\nvar throwTypeError = function (type) {\n    throw new Error('parser does not support type: ' + type);\n};\n\n/** This method should be called if we want to check if givent type is an array type\n *\n * @method isArrayType\n * @param {String} type name\n * @returns {Boolean} true if it is, otherwise false\n */\nvar isArrayType = function (type) {\n    return type.slice(-2) === '[]';\n};\n\n/**\n * This method should be called to return dynamic type length in hex\n *\n * @method dynamicTypeBytes\n * @param {String} type\n * @param {String|Array} dynamic type\n * @return {String} length of dynamic type in hex or empty string if type is not dynamic\n */\nvar dynamicTypeBytes = function (type, value) {\n    // TODO: decide what to do with array of strings\n    if (isArrayType(type) || type === 'bytes')\n        return f.formatInputInt(value.length);\n    return \"\";\n};\n\nvar inputTypes = types.inputTypes();\n\n/**\n * Formats input params to bytes\n *\n * @method formatInput\n * @param {Array} abi inputs of method\n * @param {Array} params that will be formatted to bytes\n * @returns bytes representation of input params\n */\nvar formatInput = function (inputs, params) {\n    var bytes = \"\";\n    var toAppendConstant = \"\";\n    var toAppendArrayContent = \"\";\n\n    /// first we iterate in search for dynamic\n    inputs.forEach(function (input, index) {\n        bytes += dynamicTypeBytes(input.type, params[index]);\n    });\n\n    inputs.forEach(function (input, i) {\n        /*jshint maxcomplexity:5 */\n        var typeMatch = false;\n        for (var j = 0; j < inputTypes.length && !typeMatch; j++) {\n            typeMatch = inputTypes[j].type(inputs[i].type, params[i]);\n        }\n        if (!typeMatch) {\n            throwTypeError(inputs[i].type);\n        }\n\n        var formatter = inputTypes[j - 1].format;\n\n        if (isArrayType(inputs[i].type))\n            toAppendArrayContent += params[i].reduce(function (acc, curr) {\n                return acc + formatter(curr);\n            }, \"\");\n        else if (inputs[i].type === 'bytes')\n            toAppendArrayContent += formatter(params[i]);\n        else\n            toAppendConstant += formatter(params[i]);\n    });\n\n    bytes += toAppendConstant + toAppendArrayContent;\n\n    return bytes;\n};\n\n/**\n * This method should be called to predict the length of dynamic type\n *\n * @method dynamicBytesLength\n * @param {String} type\n * @returns {Number} length of dynamic type, 0 or multiplication of ETH_PADDING (32)\n */\nvar dynamicBytesLength = function (type) {\n    if (isArrayType(type) || type === 'bytes')\n        return c.ETH_PADDING * 2;\n    return 0;\n};\n\nvar outputTypes = types.outputTypes();\n\n/** \n * Formats output bytes back to param list\n *\n * @method formatOutput\n * @param {Array} abi outputs of method\n * @param {String} bytes represention of output\n * @returns {Array} output params\n */\nvar formatOutput = function (outs, output) {\n\n    output = output.slice(2);\n    var result = [];\n    var padding = c.ETH_PADDING * 2;\n\n    var dynamicPartLength = outs.reduce(function (acc, curr) {\n        return acc + dynamicBytesLength(curr.type);\n    }, 0);\n\n    var dynamicPart = output.slice(0, dynamicPartLength);\n    output = output.slice(dynamicPartLength);\n\n    outs.forEach(function (out, i) {\n        /*jshint maxcomplexity:6 */\n        var typeMatch = false;\n        for (var j = 0; j < outputTypes.length && !typeMatch; j++) {\n            typeMatch = outputTypes[j].type(outs[i].type);\n        }\n\n        if (!typeMatch) {\n            throwTypeError(outs[i].type);\n        }\n\n        var formatter = outputTypes[j - 1].format;\n        if (isArrayType(outs[i].type)) {\n            var size = f.formatOutputUInt(dynamicPart.slice(0, padding));\n            dynamicPart = dynamicPart.slice(padding);\n            var array = [];\n            for (var k = 0; k < size; k++) {\n                array.push(formatter(output.slice(0, padding)));\n                output = output.slice(padding);\n            }\n            result.push(array);\n        }\n        else if (types.prefixedType('bytes')(outs[i].type)) {\n            dynamicPart = dynamicPart.slice(padding);\n            result.push(formatter(output.slice(0, padding)));\n            output = output.slice(padding);\n        } else {\n            result.push(formatter(output.slice(0, padding)));\n            output = output.slice(padding);\n        }\n    });\n\n    return result;\n};\n\n/**\n * Should be called to create input parser for contract with given abi\n *\n * @method inputParser\n * @param {Array} contract abi\n * @returns {Object} input parser object for given json abi\n * TODO: refactor creating the parser, do not double logic from contract\n */\nvar inputParser = function (json) {\n    var parser = {};\n    json.forEach(function (method) {\n        var displayName = utils.extractDisplayName(method.name);\n        var typeName = utils.extractTypeName(method.name);\n\n        var impl = function () {\n            var params = Array.prototype.slice.call(arguments);\n            return formatInput(method.inputs, params);\n        };\n\n        if (parser[displayName] === undefined) {\n            parser[displayName] = impl;\n        }\n\n        parser[displayName][typeName] = impl;\n    });\n\n    return parser;\n};\n\n/**\n * Should be called to create output parser for contract with given abi\n *\n * @method outputParser\n * @param {Array} contract abi\n * @returns {Object} output parser for given json abi\n */\nvar outputParser = function (json) {\n    var parser = {};\n    json.forEach(function (method) {\n\n        var displayName = utils.extractDisplayName(method.name);\n        var typeName = utils.extractTypeName(method.name);\n\n        var impl = function (output) {\n            return formatOutput(method.outputs, output);\n        };\n\n        if (parser[displayName] === undefined) {\n            parser[displayName] = impl;\n        }\n\n        parser[displayName][typeName] = impl;\n    });\n\n    return parser;\n};\n\nmodule.exports = {\n    inputParser: inputParser,\n    outputParser: outputParser,\n    formatInput: formatInput,\n    formatOutput: formatOutput\n};\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file formatters.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nif (\"build\" !== 'build') {/*\n    var BigNumber = require('bignumber.js'); // jshint ignore:line\n*/}\n\nvar utils = require('../utils/utils');\nvar c = require('../utils/config');\n\n/**\n * Should be called to pad string to expected length\n *\n * @method padLeft\n * @param {String} string to be padded\n * @param {Number} characters that result string should have\n * @param {String} sign, by default 0\n * @returns {String} right aligned string\n */\nvar padLeft = function (string, chars, sign) {\n    return new Array(chars - string.length + 1).join(sign ? sign : \"0\") + string;\n};\n\n/**\n * Formats input value to byte representation of int\n * If value is negative, return it's two's complement\n * If the value is floating point, round it down\n *\n * @method formatInputInt\n * @param {String|Number|BigNumber} value that needs to be formatted\n * @returns {String} right-aligned byte representation of int\n */\nvar formatInputInt = function (value) {\n    var padding = c.ETH_PADDING * 2;\n    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);\n    return padLeft(utils.toTwosComplement(value).round().toString(16), padding);\n};\n\n/**\n * Formats input value to byte representation of string\n *\n * @method formatInputString\n * @param {String}\n * @returns {String} left-algined byte representation of string\n */\nvar formatInputString = function (value) {\n    return utils.fromAscii(value, c.ETH_PADDING).substr(2);\n};\n\n/**\n * Formats input value to byte representation of bool\n *\n * @method formatInputBool\n * @param {Boolean}\n * @returns {String} right-aligned byte representation bool\n */\nvar formatInputBool = function (value) {\n    return '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');\n};\n\n/**\n * Formats input value to byte representation of real\n * Values are multiplied by 2^m and encoded as integers\n *\n * @method formatInputReal\n * @param {String|Number|BigNumber}\n * @returns {String} byte representation of real\n */\nvar formatInputReal = function (value) {\n    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128))); \n};\n\n/**\n * Check if input value is negative\n *\n * @method signedIsNegative\n * @param {String} value is hex format\n * @returns {Boolean} true if it is negative, otherwise false\n */\nvar signedIsNegative = function (value) {\n    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';\n};\n\n/**\n * Formats right-aligned output bytes to int\n *\n * @method formatOutputInt\n * @param {String} bytes\n * @returns {BigNumber} right-aligned output bytes formatted to big number\n */\nvar formatOutputInt = function (value) {\n\n    value = value || \"0\";\n\n    // check if it's negative number\n    // it it is, return two's complement\n    if (signedIsNegative(value)) {\n        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);\n    }\n    return new BigNumber(value, 16);\n};\n\n/**\n * Formats right-aligned output bytes to uint\n *\n * @method formatOutputUInt\n * @param {String} bytes\n * @returns {BigNumeber} right-aligned output bytes formatted to uint\n */\nvar formatOutputUInt = function (value) {\n    value = value || \"0\";\n    return new BigNumber(value, 16);\n};\n\n/**\n * Formats right-aligned output bytes to real\n *\n * @method formatOutputReal\n * @param {String}\n * @returns {BigNumber} input bytes formatted to real\n */\nvar formatOutputReal = function (value) {\n    return formatOutputInt(value).dividedBy(new BigNumber(2).pow(128)); \n};\n\n/**\n * Formats right-aligned output bytes to ureal\n *\n * @method formatOutputUReal\n * @param {String}\n * @returns {BigNumber} input bytes formatted to ureal\n */\nvar formatOutputUReal = function (value) {\n    return formatOutputUInt(value).dividedBy(new BigNumber(2).pow(128)); \n};\n\n/**\n * Should be used to format output hash\n *\n * @method formatOutputHash\n * @param {String}\n * @returns {String} right-aligned output bytes formatted to hex\n */\nvar formatOutputHash = function (value) {\n    return \"0x\" + value;\n};\n\n/**\n * Should be used to format output bool\n *\n * @method formatOutputBool\n * @param {String}\n * @returns {Boolean} right-aligned input bytes formatted to bool\n */\nvar formatOutputBool = function (value) {\n    return value === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;\n};\n\n/**\n * Should be used to format output string\n *\n * @method formatOutputString\n * @param {Sttring} left-aligned hex representation of string\n * @returns {String} ascii string\n */\nvar formatOutputString = function (value) {\n    return utils.toAscii(value);\n};\n\n/**\n * Should be used to format output address\n *\n * @method formatOutputAddress\n * @param {String} right-aligned input bytes\n * @returns {String} address\n */\nvar formatOutputAddress = function (value) {\n    return \"0x\" + value.slice(value.length - 40, value.length);\n};\n\nmodule.exports = {\n    formatInputInt: formatInputInt,\n    formatInputString: formatInputString,\n    formatInputBool: formatInputBool,\n    formatInputReal: formatInputReal,\n    formatOutputInt: formatOutputInt,\n    formatOutputUInt: formatOutputUInt,\n    formatOutputReal: formatOutputReal,\n    formatOutputUReal: formatOutputUReal,\n    formatOutputHash: formatOutputHash,\n    formatOutputBool: formatOutputBool,\n    formatOutputString: formatOutputString,\n    formatOutputAddress: formatOutputAddress\n};\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file types.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar f = require('./formatters');\n\n/// @param expected type prefix (string)\n/// @returns function which checks if type has matching prefix. if yes, returns true, otherwise false\nvar prefixedType = function (prefix) {\n    return function (type) {\n        return type.indexOf(prefix) === 0;\n    };\n};\n\n/// @param expected type name (string)\n/// @returns function which checks if type is matching expected one. if yes, returns true, otherwise false\nvar namedType = function (name) {\n    return function (type) {\n        return name === type;\n    };\n};\n\n/// Setups input formatters for solidity types\n/// @returns an array of input formatters \nvar inputTypes = function () {\n    \n    return [\n        { type: prefixedType('uint'), format: f.formatInputInt },\n        { type: prefixedType('int'), format: f.formatInputInt },\n        { type: prefixedType('bytes'), format: f.formatInputString }, \n        { type: prefixedType('real'), format: f.formatInputReal },\n        { type: prefixedType('ureal'), format: f.formatInputReal },\n        { type: namedType('address'), format: f.formatInputInt },\n        { type: namedType('bool'), format: f.formatInputBool }\n    ];\n};\n\n/// Setups output formaters for solidity types\n/// @returns an array of output formatters\nvar outputTypes = function () {\n\n    return [\n        { type: prefixedType('uint'), format: f.formatOutputUInt },\n        { type: prefixedType('int'), format: f.formatOutputInt },\n        { type: prefixedType('bytes'), format: f.formatOutputString },\n        { type: prefixedType('real'), format: f.formatOutputReal },\n        { type: prefixedType('ureal'), format: f.formatOutputUReal },\n        { type: namedType('address'), format: f.formatOutputAddress },\n        { type: namedType('bool'), format: f.formatOutputBool }\n    ];\n};\n\nmodule.exports = {\n    prefixedType: prefixedType,\n    namedType: namedType,\n    inputTypes: inputTypes,\n    outputTypes: outputTypes\n};\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file config.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n/**\n * Utils\n * \n * @module utils\n */\n\n/**\n * Utility functions\n * \n * @class [utils] config\n * @constructor\n */\n\n/// required to define ETH_BIGNUMBER_ROUNDING_MODE\nif (\"build\" !== 'build') {/*\n    var BigNumber = require('bignumber.js'); // jshint ignore:line\n*/}\n\nvar ETH_UNITS = [ \n    'wei', \n    'Kwei', \n    'Mwei', \n    'Gwei', \n    'szabo', \n    'finney', \n    'ether', \n    'grand', \n    'Mether', \n    'Gether', \n    'Tether', \n    'Pether', \n    'Eether', \n    'Zether', \n    'Yether', \n    'Nether', \n    'Dether', \n    'Vether', \n    'Uether' \n];\n\nmodule.exports = {\n    ETH_PADDING: 32,\n    ETH_SIGNATURE_LENGTH: 4,\n    ETH_UNITS: ETH_UNITS,\n    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },\n    ETH_POLLING_TIMEOUT: 1000,\n    ETH_DEFAULTBLOCK: 'latest'\n};\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file utils.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n/**\n * Utils\n * \n * @module utils\n */\n\n/**\n * Utility functions\n * \n * @class [utils] utils\n * @constructor\n */\n\nif (\"build\" !== 'build') {/*\n    var BigNumber = require('bignumber.js'); // jshint ignore:line\n*/}\n\nvar unitMap = {\n    'wei':      '1',\n    'kwei':     '1000',\n    'ada':      '1000',\n    'mwei':     '1000000',\n    'babbage':  '1000000',\n    'gwei':     '1000000000',\n    'shannon':  '1000000000',\n    'szabo':    '1000000000000',\n    'finney':   '1000000000000000',\n    'ether':    '1000000000000000000',\n    'kether':   '1000000000000000000000',\n    'grand':    '1000000000000000000000',\n    'einstein': '1000000000000000000000',\n    'mether':   '1000000000000000000000000',\n    'gether':   '1000000000000000000000000000',\n    'tether':   '1000000000000000000000000000000'\n};\n\n\n/** Finds first index of array element matching pattern\n *\n * @method findIndex\n * @param {Array}\n * @param {Function} pattern\n * @returns {Number} index of element\n */\nvar findIndex = function (array, callback) {\n    var end = false;\n    var i = 0;\n    for (; i < array.length && !end; i++) {\n        end = callback(array[i]);\n    }\n    return end ? i - 1 : -1;\n};\n\n/** \n * Should be called to get sting from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nvar toAscii = function(hex) {\n// Find termination\n    var str = \"\";\n    var i = 0, l = hex.length;\n    if (hex.substring(0, 2) === '0x') {\n        i = 2;\n    }\n    for (; i < l; i+=2) {\n        var code = parseInt(hex.substr(i, 2), 16);\n        if (code === 0) {\n            break;\n        }\n\n        str += String.fromCharCode(code);\n    }\n\n    return str;\n};\n    \n/**\n * Shold be called to get hex representation (prefixed by 0x) of ascii string \n *\n * @method fromAscii\n * @param {String} string\n * @returns {String} hex representation of input string\n */\nvar toHexNative = function(str) {\n    var hex = \"\";\n    for(var i = 0; i < str.length; i++) {\n        var n = str.charCodeAt(i).toString(16);\n        hex += n.length < 2 ? '0' + n : n;\n    }\n\n    return hex;\n};\n\n/**\n * Shold be called to get hex representation (prefixed by 0x) of ascii string \n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nvar fromAscii = function(str, pad) {\n    pad = pad === undefined ? 0 : pad;\n    var hex = toHexNative(str);\n    while (hex.length < pad*2)\n        hex += \"00\";\n    return \"0x\" + hex;\n};\n\n/**\n * Should be called to get display name of contract function\n * \n * @method extractDisplayName\n * @param {String} name of function/event\n * @returns {String} display name for function/event eg. multiply(uint256) -> multiply\n */\nvar extractDisplayName = function (name) {\n    var length = name.indexOf('('); \n    return length !== -1 ? name.substr(0, length) : name;\n};\n\n/// @returns overloaded part of function/event name\nvar extractTypeName = function (name) {\n    /// TODO: make it invulnerable\n    var length = name.indexOf('(');\n    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : \"\";\n};\n\n/**\n * Filters all functions from input abi\n *\n * @method filterFunctions\n * @param {Array} abi\n * @returns {Array} abi array with filtered objects of type 'function'\n */\nvar filterFunctions = function (json) {\n    return json.filter(function (current) {\n        return current.type === 'function'; \n    }); \n};\n\n/**\n * Filters all events from input abi\n *\n * @method filterEvents\n * @param {Array} abi\n * @returns {Array} abi array with filtered objects of type 'event'\n */\nvar filterEvents = function (json) {\n    return json.filter(function (current) {\n        return current.type === 'event';\n    });\n};\n\n/**\n * Converts value to it's decimal representation in string\n *\n * @method toDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\nvar toDecimal = function (value) {\n    return toBigNumber(value).toNumber();\n};\n\n/**\n * Converts value to it's hex representation\n *\n * @method fromDecimal\n * @param {String|Number|BigNumber}\n * @return {String}\n */\nvar fromDecimal = function (value) {\n    var number = toBigNumber(value);\n    var result = number.toString(16);\n\n    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;\n};\n\n/**\n * Auto converts any given value into it's hex representation.\n *\n * And even stringifys objects before.\n *\n * @method toHex\n * @param {String|Number|BigNumber|Object}\n * @return {String}\n */\nvar toHex = function (val) {\n    /*jshint maxcomplexity:7 */\n\n    if(isBoolean(val))\n        return val;\n\n    if(isBigNumber(val))\n        return fromDecimal(val);\n\n    if(isObject(val))\n        return fromAscii(JSON.stringify(val));\n\n    // if its a negative number, pass it through fromDecimal\n    if (isString(val)) {\n        if (val.indexOf('-0x') === 0)\n           return fromDecimal(val);\n        else if (!isFinite(val))\n            return fromAscii(val);\n    }\n\n    return fromDecimal(val);\n};\n\n/**\n * Returns value of unit in Wei\n *\n * @method getValueOfUnit\n * @param {String} unit the unit to convert to, default ether\n * @returns {BigNumber} value of the unit (in Wei)\n * @throws error if the unit is not correct:w\n */\nvar getValueOfUnit = function (unit) {\n    unit = unit ? unit.toLowerCase() : 'ether';\n    var unitValue = unitMap[unit];\n    if (unitValue === undefined) {\n        throw new Error('This unit doesn\\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));\n    }\n    return new BigNumber(unitValue, 10);\n};\n\n/**\n * Takes a number of wei and converts it to any other ether unit.\n *\n * Possible units are:\n * - kwei/ada\n * - mwei/babbage\n * - gwei/shannon\n * - szabo\n * - finney\n * - ether\n * - kether/grand/einstein\n * - mether\n * - gether\n * - tether\n *\n * @method fromWei\n * @param {Number|String} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert to, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\nvar fromWei = function(number, unit) {\n    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));\n\n    return isBigNumber(number) ? returnValue : returnValue.toString(10); \n};\n\n/**\n * Takes a number of a unit and converts it to wei.\n *\n * Possible units are:\n * - kwei/ada\n * - mwei/babbage\n * - gwei/shannon\n * - szabo\n * - finney\n * - ether\n * - kether/grand/einstein\n * - mether\n * - gether\n * - tether\n *\n * @method toWei\n * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal\n * @param {String} unit the unit to convert from, default ether\n * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number\n*/\nvar toWei = function(number, unit) {\n    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));\n\n    return isBigNumber(number) ? returnValue : returnValue.toString(10); \n};\n\n/**\n * Takes an input and transforms it into an bignumber\n *\n * @method toBigNumber\n * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber\n * @return {BigNumber} BigNumber\n*/\nvar toBigNumber = function(number) {\n    /*jshint maxcomplexity:5 */\n    number = number || 0;\n    if (isBigNumber(number))\n        return number;\n\n    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {\n        return new BigNumber(number.replace('0x',''), 16);\n    }\n   \n    return new BigNumber(number.toString(10), 10);\n};\n\n/**\n * Takes and input transforms it into bignumber and if it is negative value, into two's complement\n *\n * @method toTwosComplement\n * @param {Number|String|BigNumber}\n * @return {BigNumber}\n */\nvar toTwosComplement = function (number) {\n    var bigNumber = toBigNumber(number);\n    if (bigNumber.lessThan(0)) {\n        return new BigNumber(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16).plus(bigNumber).plus(1);\n    }\n    return bigNumber;\n};\n\n/**\n * Checks if the given string has proper length\n *\n * @method isAddress\n * @param {String} address the given HEX adress\n * @return {Boolean}\n*/\nvar isAddress = function(address) {\n    if (!isString(address)) {\n        return false;\n    }\n\n    return ((address.indexOf('0x') === 0 && address.length === 42) ||\n            (address.indexOf('0x') === -1 && address.length === 40));\n};\n\n/**\n * Returns true if object is BigNumber, otherwise false\n *\n * @method isBigNumber\n * @param {Object}\n * @return {Boolean} \n */\nvar isBigNumber = function (object) {\n    return object instanceof BigNumber ||\n        (object && object.constructor && object.constructor.name === 'BigNumber');\n};\n\n/**\n * Returns true if object is string, otherwise false\n * \n * @method isString\n * @param {Object}\n * @return {Boolean}\n */\nvar isString = function (object) {\n    return typeof object === 'string' ||\n        (object && object.constructor && object.constructor.name === 'String');\n};\n\n/**\n * Returns true if object is function, otherwise false\n *\n * @method isFunction\n * @param {Object}\n * @return {Boolean}\n */\nvar isFunction = function (object) {\n    return typeof object === 'function';\n};\n\n/**\n * Returns true if object is Objet, otherwise false\n *\n * @method isObject\n * @param {Object}\n * @return {Boolean}\n */\nvar isObject = function (object) {\n    return typeof object === 'object';\n};\n\n/**\n * Returns true if object is boolean, otherwise false\n *\n * @method isBoolean\n * @param {Object}\n * @return {Boolean}\n */\nvar isBoolean = function (object) {\n    return typeof object === 'boolean';\n};\n\n/**\n * Returns true if object is array, otherwise false\n *\n * @method isArray\n * @param {Object}\n * @return {Boolean}\n */\nvar isArray = function (object) {\n    return object instanceof Array; \n};\n\nmodule.exports = {\n    findIndex: findIndex,\n    toHex: toHex,\n    toDecimal: toDecimal,\n    fromDecimal: fromDecimal,\n    toAscii: toAscii,\n    fromAscii: fromAscii,\n    extractDisplayName: extractDisplayName,\n    extractTypeName: extractTypeName,\n    filterFunctions: filterFunctions,\n    filterEvents: filterEvents,\n    toWei: toWei,\n    fromWei: fromWei,\n    toBigNumber: toBigNumber,\n    toTwosComplement: toTwosComplement,\n    isBigNumber: isBigNumber,\n    isAddress: isAddress,\n    isFunction: isFunction,\n    isString: isString,\n    isObject: isObject,\n    isBoolean: isBoolean,\n    isArray: isArray\n};\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file web3.js\n * @authors:\n *   Jeffrey Wilcke <jeff@ethdev.com>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n *   Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar version = require('../version.json');\nvar net = require('./web3/net');\nvar eth = require('./web3/eth');\nvar db = require('./web3/db');\nvar shh = require('./web3/shh');\nvar watches = require('./web3/watches');\nvar filter = require('./web3/filter');\nvar utils = require('./utils/utils');\nvar formatters = require('./solidity/formatters');\nvar requestManager = require('./web3/requestmanager');\nvar c = require('./utils/config');\n\n/// @returns an array of objects describing web3 api methods\nvar web3Methods = [\n    { name: 'sha3', call: 'web3_sha3', inputFormatter: utils.toHex },\n];\nvar web3Properties = [\n    { name: 'version.client', getter: 'web3_clientVersion' },\n    { name: 'version.network', getter: 'net_version' }\n];\n\n\n/// creates methods in a given object based on method description on input\n/// setups api calls for these methods\nvar setupMethods = function (obj, methods) {\n    methods.forEach(function (method) {\n        // allow for object methods 'myObject.method'\n        var objectMethods = method.name.split('.'),\n            callFunction = function () {\n                /*jshint maxcomplexity:8 */\n                \n                var callback = null,\n                    args = Array.prototype.slice.call(arguments),\n                    call = typeof method.call === 'function' ? method.call(args) : method.call;\n\n                // get the callback if one is available\n                if(typeof args[args.length-1] === 'function'){\n                    callback = args[args.length-1];\n                    Array.prototype.pop.call(args);\n                }\n\n                // add the defaultBlock if not given\n                if(method.addDefaultblock) {\n                    if(args.length !== method.addDefaultblock)\n                        Array.prototype.push.call(args, (isFinite(c.ETH_DEFAULTBLOCK) ? utils.fromDecimal(c.ETH_DEFAULTBLOCK) : c.ETH_DEFAULTBLOCK));\n                    else\n                        args[args.length-1] = isFinite(args[args.length-1]) ? utils.fromDecimal(args[args.length-1]) : args[args.length-1];\n                }\n\n                // show deprecated warning\n                if(method.newMethod)\n                    console.warn('This method is deprecated please use web3.'+ method.newMethod +'() instead.');\n\n                return web3.manager.send({\n                    method: call,\n                    params: args,\n                    outputFormatter: method.outputFormatter,\n                    inputFormatter: method.inputFormatter,\n                    addDefaultblock: method.addDefaultblock\n                }, callback);\n            };\n\n        if(objectMethods.length > 1) {\n            if(!obj[objectMethods[0]])\n                obj[objectMethods[0]] = {};\n\n            obj[objectMethods[0]][objectMethods[1]] = callFunction;\n        \n        } else {\n\n            obj[objectMethods[0]] = callFunction;\n        }\n\n    });\n};\n\n/// creates properties in a given object based on properties description on input\n/// setups api calls for these properties\nvar setupProperties = function (obj, properties) {\n    properties.forEach(function (property) {\n        var objectProperties = property.name.split('.'),\n            proto = {};\n\n        proto.get = function () {\n\n            // show deprecated warning\n            if(property.newProperty)\n                console.warn('This property is deprecated please use web3.'+ property.newProperty +' instead.');\n\n\n            return web3.manager.send({\n                method: property.getter,\n                outputFormatter: property.outputFormatter\n            });\n        };\n\n        if (property.setter) {\n            proto.set = function (val) {\n\n                // show deprecated warning\n                if(property.newProperty)\n                    console.warn('This property is deprecated please use web3.'+ property.newProperty +' instead.');\n\n                return web3.manager.send({\n                    method: property.setter,\n                    params: [val],\n                    inputFormatter: property.inputFormatter\n                });\n            };\n        }\n\n        proto.enumerable = !property.newProperty;\n\n        if(objectProperties.length > 1) {\n            if(!obj[objectProperties[0]])\n                obj[objectProperties[0]] = {};\n\n            Object.defineProperty(obj[objectProperties[0]], objectProperties[1], proto);        \n        } else\n            Object.defineProperty(obj, property.name, proto);\n\n    });\n};\n\n/*jshint maxparams:4 */\nvar startPolling = function (method, id, callback, uninstall) {\n    web3.manager.startPolling({\n        method: method, \n        params: [id]\n    }, id,  callback, uninstall); \n};\n/*jshint maxparams:3 */\n\nvar stopPolling = function (id) {\n    web3.manager.stopPolling(id);\n};\n\nvar ethWatch = {\n    startPolling: startPolling.bind(null, 'eth_getFilterChanges'), \n    stopPolling: stopPolling\n};\n\nvar shhWatch = {\n    startPolling: startPolling.bind(null, 'shh_getFilterChanges'), \n    stopPolling: stopPolling\n};\n\n/// setups web3 object, and it's in-browser executed methods\nvar web3 = {\n\n    version: {\n        api: version.version\n    },\n\n    manager: requestManager(),\n    providers: {},\n\n    setProvider: function (provider) {\n        web3.manager.setProvider(provider);\n    },\n    \n    /// Should be called to reset state of web3 object\n    /// Resets everything except manager\n    reset: function () {\n        web3.manager.reset(); \n    },\n\n    /// @returns hex string of the input\n    toHex: utils.toHex,\n\n    /// @returns ascii string representation of hex value prefixed with 0x\n    toAscii: utils.toAscii,\n\n    /// @returns hex representation (prefixed by 0x) of ascii string\n    fromAscii: utils.fromAscii,\n\n    /// @returns decimal representaton of hex value prefixed by 0x\n    toDecimal: utils.toDecimal,\n\n    /// @returns hex representation (prefixed by 0x) of decimal value\n    fromDecimal: utils.fromDecimal,\n\n    /// @returns a BigNumber object\n    toBigNumber: utils.toBigNumber,\n\n    toWei: utils.toWei,\n    fromWei: utils.fromWei,\n    isAddress: utils.isAddress,\n\n    // provide network information\n    net: {\n        // peerCount: \n    },\n\n\n    /// eth object prototype\n    eth: {\n        // DEPRECATED\n        contractFromAbi: function (abi) {\n            console.warn('Initiating a contract like this is deprecated please use var MyContract = eth.contract(abi); new MyContract(address); instead.');\n\n            return function(addr) {\n                // Default to address of Config. TODO: rremove prior to genesis.\n                addr = addr || '0xc6d9d2cd449a754c494264e1809c50e34d64562b';\n                var ret = web3.eth.contract(addr, abi);\n                ret.address = addr;\n                return ret;\n            };\n        },\n\n        /// @param filter may be a string, object or event\n        /// @param eventParams is optional, this is an object with optional event eventParams params\n        /// @param options is optional, this is an object with optional event options ('max'...)\n        /*jshint maxparams:4 */\n        filter: function (fil, eventParams, options) {\n\n            // if its event, treat it differently\n            if (fil._isEvent)\n                return fil(eventParams, options);\n\n            return filter(fil, ethWatch, formatters.outputLogFormatter);\n        },\n        // DEPRECATED\n        watch: function (fil, eventParams, options) {\n            console.warn('eth.watch() is deprecated please use eth.filter() instead.');\n            return this.filter(fil, eventParams, options);\n        }\n        /*jshint maxparams:3 */\n    },\n\n    /// db object prototype\n    db: {},\n\n    /// shh object prototype\n    shh: {\n        /// @param filter may be a string, object or event\n        filter: function (fil) {\n            return filter(fil, shhWatch, formatters.outputPostFormatter);\n        },\n        // DEPRECATED\n        watch: function (fil) {\n            console.warn('shh.watch() is deprecated please use shh.filter() instead.');\n            return this.filter(fil);\n        }\n    }\n};\n\n\n// ADD defaultblock\nObject.defineProperty(web3.eth, 'defaultBlock', {\n    get: function () {\n        return c.ETH_DEFAULTBLOCK;\n    },\n    set: function (val) {\n        c.ETH_DEFAULTBLOCK = val;\n        return c.ETH_DEFAULTBLOCK;\n    }\n});\n\n\n/// setups all api methods\nsetupMethods(web3, web3Methods);\nsetupProperties(web3, web3Properties);\nsetupMethods(web3.net, net.methods);\nsetupProperties(web3.net, net.properties);\nsetupMethods(web3.eth, eth.methods);\nsetupProperties(web3.eth, eth.properties);\nsetupMethods(web3.db, db.methods());\nsetupMethods(web3.shh, shh.methods());\nsetupMethods(ethWatch, watches.eth());\nsetupMethods(shhWatch, watches.shh());\n\nmodule.exports = web3;\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file contract.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2014\n */\n\nvar web3 = require('../web3'); \nvar abi = require('../solidity/abi');\nvar utils = require('../utils/utils');\nvar eventImpl = require('./event');\nvar signature = require('./signature');\n\nvar exportNatspecGlobals = function (vars) {\n    // it's used byt natspec.js\n    // TODO: figure out better way to solve this\n    web3._currentContractAbi = vars.abi;\n    web3._currentContractAddress = vars.address;\n    web3._currentContractMethodName = vars.method;\n    web3._currentContractMethodParams = vars.params;\n};\n\nvar addFunctionRelatedPropertiesToContract = function (contract) {\n    \n    contract.call = function (options) {\n        contract._isTransaction = false;\n        contract._options = options;\n        return contract;\n    };\n\n\n    contract.sendTransaction = function (options) {\n        contract._isTransaction = true;\n        contract._options = options;\n        return contract;\n    };\n    // DEPRECATED\n    contract.transact = function (options) {\n\n        console.warn('myContract.transact() is deprecated please use myContract.sendTransaction() instead.');\n\n        return contract.sendTransaction(options);\n    };\n\n    contract._options = {};\n    ['gas', 'gasPrice', 'value', 'from'].forEach(function(p) {\n        contract[p] = function (v) {\n            contract._options[p] = v;\n            return contract;\n        };\n    });\n\n};\n\nvar addFunctionsToContract = function (contract, desc, address) {\n    var inputParser = abi.inputParser(desc);\n    var outputParser = abi.outputParser(desc);\n\n    // create contract functions\n    utils.filterFunctions(desc).forEach(function (method) {\n\n        var displayName = utils.extractDisplayName(method.name);\n        var typeName = utils.extractTypeName(method.name);\n\n        var impl = function () {\n            /*jshint maxcomplexity:7 */\n            var params = Array.prototype.slice.call(arguments);\n            var sign = signature.functionSignatureFromAscii(method.name);\n            var parsed = inputParser[displayName][typeName].apply(null, params);\n\n            var options = contract._options || {};\n            options.to = address;\n            options.data = sign + parsed;\n            \n            var isTransaction = contract._isTransaction === true || (contract._isTransaction !== false && !method.constant);\n            var collapse = options.collapse !== false;\n            \n            // reset\n            contract._options = {};\n            contract._isTransaction = null;\n\n            if (isTransaction) {\n                \n                exportNatspecGlobals({\n                    abi: desc,\n                    address: address,\n                    method: method.name,\n                    params: params\n                });\n\n                // transactions do not have any output, cause we do not know, when they will be processed\n                web3.eth.sendTransaction(options);\n                return;\n            }\n            \n            var output = web3.eth.call(options);\n            var ret = outputParser[displayName][typeName](output);\n            if (collapse)\n            {\n                if (ret.length === 1)\n                    ret = ret[0];\n                else if (ret.length === 0)\n                    ret = null;\n            }\n            return ret;\n        };\n\n        if (contract[displayName] === undefined) {\n            contract[displayName] = impl;\n        }\n\n        contract[displayName][typeName] = impl;\n    });\n};\n\nvar addEventRelatedPropertiesToContract = function (contract, desc, address) {\n    contract.address = address;\n    contract._onWatchEventResult = function (data) {\n        var matchingEvent = event.getMatchingEvent(utils.filterEvents(desc));\n        var parser = eventImpl.outputParser(matchingEvent);\n        return parser(data);\n    };\n    \n    Object.defineProperty(contract, 'topics', {\n        get: function() {\n            return utils.filterEvents(desc).map(function (e) {\n                return signature.eventSignatureFromAscii(e.name);\n            });\n        }\n    });\n\n};\n\nvar addEventsToContract = function (contract, desc, address) {\n    // create contract events\n    utils.filterEvents(desc).forEach(function (e) {\n\n        var impl = function () {\n            var params = Array.prototype.slice.call(arguments);\n            var sign = signature.eventSignatureFromAscii(e.name);\n            var event = eventImpl.inputParser(address, sign, e);\n            var o = event.apply(null, params);\n            var outputFormatter = function (data) {\n                var parser = eventImpl.outputParser(e);\n                return parser(data);\n            };\n            return web3.eth.filter(o, undefined, undefined, outputFormatter);\n        };\n        \n        // this property should be used by eth.filter to check if object is an event\n        impl._isEvent = true;\n\n        var displayName = utils.extractDisplayName(e.name);\n        var typeName = utils.extractTypeName(e.name);\n\n        if (contract[displayName] === undefined) {\n            contract[displayName] = impl;\n        }\n\n        contract[displayName][typeName] = impl;\n\n    });\n};\n\n\n/**\n * This method should be called when we want to call / transact some solidity method from javascript\n * it returns an object which has same methods available as solidity contract description\n * usage example: \n *\n * var abi = [{\n *      name: 'myMethod',\n *      inputs: [{ name: 'a', type: 'string' }],\n *      outputs: [{name: 'd', type: 'string' }]\n * }];  // contract abi\n *\n * var MyContract = web3.eth.contract(abi); // creation of contract prototype\n *\n * var contractInstance = new MyContract('0x0123123121');\n *\n * contractInstance.myMethod('this is test string param for call'); // myMethod call (implicit, default)\n * contractInstance.call().myMethod('this is test string param for call'); // myMethod call (explicit)\n * contractInstance.sendTransaction().myMethod('this is test string param for transact'); // myMethod sendTransaction\n *\n * @param abi - abi json description of the contract, which is being created\n * @returns contract object\n */\nvar contract = function (abi) {\n\n    // return prototype\n    if(abi instanceof Array && arguments.length === 1) {\n        return Contract.bind(null, abi);\n\n    // deprecated: auto initiate contract\n    } else {\n\n        console.warn('Initiating a contract like this is deprecated please use var MyContract = eth.contract(abi); new MyContract(address); instead.');\n\n        return new Contract(arguments[1], arguments[0]);\n    }\n\n};\n\nfunction Contract(abi, address) {\n\n    // workaround for invalid assumption that method.name is the full anonymous prototype of the method.\n    // it's not. it's just the name. the rest of the code assumes it's actually the anonymous\n    // prototype, so we make it so as a workaround.\n    // TODO: we may not want to modify input params, maybe use copy instead?\n    abi.forEach(function (method) {\n        if (method.name.indexOf('(') === -1) {\n            var displayName = method.name;\n            var typeName = method.inputs.map(function(i){return i.type; }).join();\n            method.name = displayName + '(' + typeName + ')';\n        }\n    });\n\n    var result = {};\n    addFunctionRelatedPropertiesToContract(result);\n    addFunctionsToContract(result, abi, address);\n    addEventRelatedPropertiesToContract(result, abi, address);\n    addEventsToContract(result, abi, address);\n\n    return result;\n}\n\nmodule.exports = contract;\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file db.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n\n/// @returns an array of objects describing web3.db api methods\nvar methods = function () {\n    return [\n    { name: 'putString', call: 'db_putString'},\n    { name: 'getString', call: 'db_getString'},\n    { name: 'putHex', call: 'db_putHex'},\n    { name: 'getHex', call: 'db_getHex'}\n    ];\n};\n\nmodule.exports = {\n    methods: methods\n};\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file eth.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\n/**\n * Web3\n * \n * @module web3\n */\n\n/**\n * Eth methods and properties\n *\n * An example method object can look as follows:\n *\n *      {\n *      name: 'getBlock',\n *      call: blockCall,\n *      outputFormatter: formatters.outputBlockFormatter,\n *      inputFormatter: [ // can be a formatter funciton or an array of functions. Where each item in the array will be used for one parameter\n *           utils.toHex, // formats paramter 1\n *           function(param){ if(!param) return false; } // formats paramter 2\n *         ]\n *       },\n *\n * @class [web3] eth\n * @constructor\n */\n\n\nvar formatters = require('./formatters');\nvar utils = require('../utils/utils');\n\n\nvar blockCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";\n};\n\nvar transactionFromBlockCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';\n};\n\nvar uncleCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';\n};\n\nvar getBlockTransactionCountCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';\n};\n\nvar uncleCountCall = function (args) {\n    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';\n};\n\n/// @returns an array of objects describing web3.eth api methods\nvar methods = [\n    { name: 'getBalance', call: 'eth_getBalance', addDefaultblock: 2,\n        outputFormatter: formatters.convertToBigNumber},\n    { name: 'getStorage', call: 'eth_getStorage', addDefaultblock: 2},\n    { name: 'getStorageAt', call: 'eth_getStorageAt', addDefaultblock: 3,\n        inputFormatter: utils.toHex},\n    { name: 'getData', call: 'eth_getData', addDefaultblock: 2},\n    { name: 'getBlock', call: blockCall,\n        outputFormatter: formatters.outputBlockFormatter,\n        inputFormatter: [utils.toHex, function(param){ return (!param) ? false : true; }]},\n    { name: 'getUncle', call: uncleCall,\n        outputFormatter: formatters.outputBlockFormatter,\n        inputFormatter: [utils.toHex, utils.toHex, function(param){ return (!param) ? false : true; }]},\n    { name: 'getCompilers', call: 'eth_getCompilers' },\n    { name: 'getBlockTransactionCount', call: getBlockTransactionCountCall,\n        outputFormatter: utils.toDecimal,\n        inputFormatter: utils.toHex },\n    { name: 'getBlockUncleCount', call: uncleCountCall,\n        outputFormatter: utils.toDecimal,\n        inputFormatter: utils.toHex },\n    { name: 'getTransaction', call: 'eth_getTransactionByHash',\n        outputFormatter: formatters.outputTransactionFormatter },\n    { name: 'getTransactionFromBlock', call: transactionFromBlockCall,\n        outputFormatter: formatters.outputTransactionFormatter,\n        inputFormatter: utils.toHex },\n    { name: 'getTransactionCount', call: 'eth_getTransactionCount', addDefaultblock: 2,\n        outputFormatter: utils.toDecimal},\n    { name: 'sendTransaction', call: 'eth_sendTransaction',\n        inputFormatter: formatters.inputTransactionFormatter },\n    { name: 'call', call: 'eth_call', addDefaultblock: 2,\n        inputFormatter: formatters.inputCallFormatter },\n    { name: 'compile.solidity', call: 'eth_compileSolidity' },\n    { name: 'compile.lll', call: 'eth_compileLLL', inputFormatter: utils.toHex },\n    { name: 'compile.serpent', call: 'eth_compileSerpent', inputFormatter: utils.toHex },\n    { name: 'flush', call: 'eth_flush' },\n\n    // deprecated methods\n    { name: 'balanceAt', call: 'eth_balanceAt', newMethod: 'eth.getBalance' },\n    { name: 'stateAt', call: 'eth_stateAt', newMethod: 'eth.getStorageAt' },\n    { name: 'storageAt', call: 'eth_storageAt', newMethod: 'eth.getStorage' },\n    { name: 'countAt', call: 'eth_countAt', newMethod: 'eth.getTransactionCount' },\n    { name: 'codeAt', call: 'eth_codeAt', newMethod: 'eth.getData' },\n    { name: 'transact', call: 'eth_transact', newMethod: 'eth.sendTransaction' },\n    { name: 'block', call: blockCall, newMethod: 'eth.getBlock' },\n    { name: 'transaction', call: transactionFromBlockCall, newMethod: 'eth.getTransaction' },\n    { name: 'uncle', call: uncleCall, newMethod: 'eth.getUncle' },\n    { name: 'compilers', call: 'eth_compilers', newMethod: 'eth.getCompilers' },\n    { name: 'solidity', call: 'eth_solidity', newMethod: 'eth.compile.solidity' },\n    { name: 'lll', call: 'eth_lll', newMethod: 'eth.compile.lll' },\n    { name: 'serpent', call: 'eth_serpent', newMethod: 'eth.compile.serpent' },\n    { name: 'transactionCount', call: getBlockTransactionCountCall, newMethod: 'eth.getBlockTransactionCount' },\n    { name: 'uncleCount', call: uncleCountCall, newMethod: 'eth.getBlockUncleCount' },\n    { name: 'logs', call: 'eth_logs' }\n];\n\n/// @returns an array of objects describing web3.eth api properties\nvar properties = [\n    { name: 'coinbase', getter: 'eth_coinbase'},\n    { name: 'mining', getter: 'eth_mining'},\n    { name: 'gasPrice', getter: 'eth_gasPrice', outputFormatter: formatters.convertToBigNumber},\n    { name: 'accounts', getter: 'eth_accounts' },\n    { name: 'blockNumber', getter: 'eth_blockNumber', outputFormatter: utils.toDecimal},\n\n    // deprecated properties\n    { name: 'listening', getter: 'net_listening', setter: 'eth_setListening', newProperty: 'net.listening'},\n    { name: 'peerCount', getter: 'net_peerCount', newProperty: 'net.peerCount'},\n    { name: 'number', getter: 'eth_number', newProperty: 'eth.blockNumber'}\n];\n\n\nmodule.exports = {\n    methods: methods,\n    properties: properties\n};\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file event.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2014\n */\n\nvar abi = require('../solidity/abi');\nvar utils = require('../utils/utils');\nvar signature = require('./signature');\n\n/// filter inputs array && returns only indexed (or not) inputs\n/// @param inputs array\n/// @param bool if result should be an array of indexed params on not\n/// @returns array of (not?) indexed params\nvar filterInputs = function (inputs, indexed) {\n    return inputs.filter(function (current) {\n        return current.indexed === indexed;\n    });\n};\n\nvar inputWithName = function (inputs, name) {\n    var index = utils.findIndex(inputs, function (input) {\n        return input.name === name;\n    });\n    \n    if (index === -1) {\n        console.error('indexed param with name ' + name + ' not found');\n        return undefined;\n    }\n    return inputs[index];\n};\n\nvar indexedParamsToTopics = function (event, indexed) {\n    // sort keys?\n    return Object.keys(indexed).map(function (key) {\n        var inputs = [inputWithName(filterInputs(event.inputs, true), key)];\n\n        var value = indexed[key];\n        if (value instanceof Array) {\n            return value.map(function (v) {\n                return abi.formatInput(inputs, [v]);\n            }); \n        }\n        return abi.formatInput(inputs, [value]);\n    });\n};\n\nvar inputParser = function (address, sign, event) {\n    \n    // valid options are 'earliest', 'latest', 'offset' and 'max', as defined for 'eth.filter'\n    return function (indexed, options) {\n        var o = options || {};\n        o.address = address;\n        o.topics = [];\n        o.topics.push(sign);\n        if (indexed) {\n            o.topics = o.topics.concat(indexedParamsToTopics(event, indexed));\n        }\n        return o;\n    };\n};\n\nvar getArgumentsObject = function (inputs, indexed, notIndexed) {\n    var indexedCopy = indexed.slice();\n    var notIndexedCopy = notIndexed.slice();\n    return inputs.reduce(function (acc, current) {\n        var value;\n        if (current.indexed)\n            value = indexedCopy.splice(0, 1)[0];\n        else\n            value = notIndexedCopy.splice(0, 1)[0];\n\n        acc[current.name] = value;\n        return acc;\n    }, {}); \n};\n \nvar outputParser = function (event) {\n    \n    return function (output) {\n        var result = {\n            event: utils.extractDisplayName(event.name),\n            number: output.number,\n            hash: output.hash,\n            args: {}\n        };\n\n        output.topics = output.topic; // fallback for go-ethereum\n        if (!output.topics) {\n            return result;\n        }\n       \n        var indexedOutputs = filterInputs(event.inputs, true);\n        var indexedData = \"0x\" + output.topics.slice(1, output.topics.length).map(function (topics) { return topics.slice(2); }).join(\"\");\n        var indexedRes = abi.formatOutput(indexedOutputs, indexedData);\n\n        var notIndexedOutputs = filterInputs(event.inputs, false);\n        var notIndexedRes = abi.formatOutput(notIndexedOutputs, output.data);\n\n        result.args = getArgumentsObject(event.inputs, indexedRes, notIndexedRes);\n\n        return result;\n    };\n};\n\nvar getMatchingEvent = function (events, payload) {\n    for (var i = 0; i < events.length; i++) {\n        var sign = signature.eventSignatureFromAscii(events[i].name); \n        if (sign === payload.topics[0]) {\n            return events[i];\n        }\n    }\n    return undefined;\n};\n\n\nmodule.exports = {\n    inputParser: inputParser,\n    outputParser: outputParser,\n    getMatchingEvent: getMatchingEvent\n};\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file filter.js\n * @authors:\n *   Jeffrey Wilcke <jeff@ethdev.com>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n *   Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar utils = require('../utils/utils');\n\n/// Should be called to check if filter implementation is valid\n/// @returns true if it is, otherwise false\nvar implementationIsValid = function (i) {\n    return !!i && \n        typeof i.newFilter === 'function' && \n        typeof i.getLogs === 'function' && \n        typeof i.uninstallFilter === 'function' &&\n        typeof i.startPolling === 'function' &&\n        typeof i.stopPolling === 'function';\n};\n\n/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones\n/// @param should be string or object\n/// @returns options string or object\nvar getOptions = function (options) {\n    /*jshint maxcomplexity:9 */\n\n    if (typeof options === 'string') {\n        return options;\n    } \n\n    options = options || {};\n\n    if (options.topic) {\n        console.warn('\"topic\" is deprecated, is \"topics\" instead');\n        options.topics = options.topic;\n    }\n\n    if (options.earliest) {\n        console.warn('\"earliest\" is deprecated, is \"fromBlock\" instead');\n        options.fromBlock = options.earliest;\n    }\n\n    if (options.latest) {\n        console.warn('\"latest\" is deprecated, is \"toBlock\" instead');\n        options.toBlock = options.latest;\n    }\n\n    if (options.skip) {\n        console.warn('\"skip\" is deprecated, is \"offset\" instead');\n        options.offset = options.skip;\n    }\n\n    if (options.max) {\n        console.warn('\"max\" is deprecated, is \"limit\" instead');\n        options.limit = options.max;\n    }\n\n    // make sure topics, get converted to hex\n    if(options.topics instanceof Array) {\n        options.topics = options.topics.map(function(topic){\n            return utils.toHex(topic);\n        });\n    }\n\n\n    // evaluate lazy properties\n    return {\n        fromBlock: utils.toHex(options.fromBlock),\n        toBlock: utils.toHex(options.toBlock),\n        limit: utils.toHex(options.limit),\n        offset: utils.toHex(options.offset),\n        to: options.to,\n        address: options.address,\n        topics: options.topics\n    };\n};\n\n/// Should be used when we want to watch something\n/// it's using inner polling mechanism and is notified about changes\n/// @param options are filter options\n/// @param implementation, an abstract polling implementation\n/// @param formatter (optional), callback function which formats output before 'real' callback \nvar filter = function(options, implementation, formatter) {\n    if (!implementationIsValid(implementation)) {\n        console.error('filter implemenation is invalid');\n        return;\n    }\n\n    options = getOptions(options);\n    var callbacks = [];\n    var filterId = implementation.newFilter(options);\n\n    // call the callbacks\n    var onMessages = function (messages) {\n        messages.forEach(function (message) {\n            message = formatter ? formatter(message) : message;\n            callbacks.forEach(function (callback) {\n                callback(message);\n            });\n        });\n    };\n\n    implementation.startPolling(filterId, onMessages, implementation.uninstallFilter);\n\n    var watch = function(callback) {\n        callbacks.push(callback);\n    };\n\n    var stopWatching = function() {\n        implementation.stopPolling(filterId);\n        implementation.uninstallFilter(filterId);\n        callbacks = [];\n    };\n\n    var get = function () {\n        var results = implementation.getLogs(filterId);\n\n        return utils.isArray(results) ? results.map(function(message){\n                return formatter ? formatter(message) : message;\n            }) : results;\n    };\n    \n    return {\n        watch: watch,\n        stopWatching: stopWatching,\n        get: get,\n\n        // DEPRECATED methods\n        changed:  function(){\n            console.warn('watch().changed() is deprecated please use filter().watch() instead.');\n            return watch.apply(this, arguments);\n        },\n        arrived:  function(){\n            console.warn('watch().arrived() is deprecated please use filter().watch() instead.');\n            return watch.apply(this, arguments);\n        },\n        happened:  function(){\n            console.warn('watch().happened() is deprecated please use filter().watch() instead.');\n            return watch.apply(this, arguments);\n        },\n        uninstall: function(){\n            console.warn('watch().uninstall() is deprecated please use filter().stopWatching() instead.');\n            return stopWatching.apply(this, arguments);\n        },\n        messages: function(){\n            console.warn('watch().messages() is deprecated please use filter().get() instead.');\n            return get.apply(this, arguments);\n        },\n        logs: function(){\n            console.warn('watch().logs() is deprecated please use filter().get() instead.');\n            return get.apply(this, arguments);\n        }\n    };\n};\n\nmodule.exports = filter;\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file formatters.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\n\n/**\n * Should the input to a big number\n *\n * @method convertToBigNumber\n * @param {String|Number|BigNumber}\n * @returns {BigNumber} object\n */\nvar convertToBigNumber = function (value) {\n    return utils.toBigNumber(value);\n};\n\n/**\n * Formats the input of a transaction and converts all values to HEX\n *\n * @method inputTransactionFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputTransactionFormatter = function (options){\n\n    // make code -> data\n    if (options.code) {\n        options.data = options.code;\n        delete options.code;\n    }\n\n    ['gasPrice', 'gas', 'value'].forEach(function(key){\n        options[key] = utils.fromDecimal(options[key]);\n    });\n\n    return options;\n};\n\n/**\n * Formats the output of a transaction to its proper values\n * \n * @method outputTransactionFormatter\n * @param {Object} transaction\n * @returns {Object} transaction\n*/\nvar outputTransactionFormatter = function (tx){\n    tx.gas = utils.toDecimal(tx.gas);\n    tx.gasPrice = utils.toBigNumber(tx.gasPrice);\n    tx.value = utils.toBigNumber(tx.value);\n    return tx;\n};\n\n/**\n * Formats the input of a call and converts all values to HEX\n *\n * @method inputCallFormatter\n * @param {Object} transaction options\n * @returns object\n*/\nvar inputCallFormatter = function (options){\n\n    // make code -> data\n    if (options.code) {\n        options.data = options.code;\n        delete options.code;\n    }\n\n    return options;\n};\n\n\n/**\n * Formats the output of a block to its proper values\n *\n * @method outputBlockFormatter\n * @param {Object} block object \n * @returns {Object} block object\n*/\nvar outputBlockFormatter = function(block){\n\n    // transform to number\n    block.gasLimit = utils.toDecimal(block.gasLimit);\n    block.gasUsed = utils.toDecimal(block.gasUsed);\n    block.size = utils.toDecimal(block.size);\n    block.timestamp = utils.toDecimal(block.timestamp);\n    block.number = utils.toDecimal(block.number);\n\n    block.minGasPrice = utils.toBigNumber(block.minGasPrice);\n    block.difficulty = utils.toBigNumber(block.difficulty);\n    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);\n\n    if(block.transactions instanceof Array) {\n        block.transactions.forEach(function(item){\n            if(!utils.isString(item))\n                return outputTransactionFormatter(item);\n        });\n    }\n\n    return block;\n};\n\n/**\n * Formats the output of a log\n * \n * @method outputLogFormatter\n * @param {Object} log object\n * @returns {Object} log\n*/\nvar outputLogFormatter = function(log){\n    log.blockNumber = utils.toDecimal(log.blockNumber);\n    log.transactionIndex = utils.toDecimal(log.transactionIndex);\n    log.logIndex = utils.toDecimal(log.logIndex);\n\n    return log;\n};\n\n\n/**\n * Formats the input of a whisper post and converts all values to HEX\n *\n * @method inputPostFormatter\n * @param {Object} transaction object\n * @returns {Object}\n*/\nvar inputPostFormatter = function(post){\n\n    post.payload = utils.toHex(post.payload);\n    post.ttl = utils.fromDecimal(post.ttl);\n    post.priority = utils.fromDecimal(post.priority);\n\n    if(!(post.topics instanceof Array))\n        post.topics = [post.topics];\n\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        return utils.fromAscii(topic);\n    });\n\n    return post;\n};\n\n/**\n * Formats the output of a received post message\n *\n * @method outputPostFormatter\n * @param {Object}\n * @returns {Object}\n */\nvar outputPostFormatter = function(post){\n\n    post.expiry = utils.toDecimal(post.expiry);\n    post.sent = utils.toDecimal(post.sent);\n    post.ttl = utils.toDecimal(post.ttl);\n    post.workProved = utils.toDecimal(post.workProved);\n    post.payloadRaw = post.payload;\n    post.payload = utils.toAscii(post.payload);\n\n    if(post.payload.indexOf('{') === 0 || post.payload.indexOf('[') === 0) {\n        try {\n            post.payload = JSON.parse(post.payload);\n        } catch (e) { }\n    }\n\n    // format the following options\n    post.topics = post.topics.map(function(topic){\n        return utils.toAscii(topic);\n    });\n\n    return post;\n};\n\nmodule.exports = {\n    convertToBigNumber: convertToBigNumber,\n    inputTransactionFormatter: inputTransactionFormatter,\n    outputTransactionFormatter: outputTransactionFormatter,\n    inputCallFormatter: inputCallFormatter,\n    outputBlockFormatter: outputBlockFormatter,\n    outputLogFormatter: outputLogFormatter,\n    inputPostFormatter: inputPostFormatter,\n    outputPostFormatter: outputPostFormatter\n};\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file httpprovider.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n * @date 2014\n */\n\nif (\"build\" !== 'build') {/*\n        var XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore:line\n*/}\n\nvar HttpProvider = function (host) {\n    this.name  = 'HTTP';\n    this.handlers = [];\n    this.host = host || 'http://localhost:8080';\n};\n\nHttpProvider.prototype.send = function (payload, callback) {\n    var request = new XMLHttpRequest();\n\n    // ASYNC\n    if(typeof callback === 'function') {\n        request.onreadystatechange = function() {\n            if(request.readyState === 4) {\n                var result = '';\n                try {\n                    result = JSON.parse(request.responseText);\n                } catch(error) {\n                    result = error;\n                }\n                callback(result, request.status);\n            }\n        };\n\n        request.open('POST', this.host, true);\n        request.send(JSON.stringify(payload));\n\n    // SYNC\n    } else {\n        request.open('POST', this.host, false);\n        request.send(JSON.stringify(payload));\n\n        // check request.status\n        if(request.status !== 200)\n            return;\n        return JSON.parse(request.responseText);\n        \n    }\n};\n\nmodule.exports = HttpProvider;\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file jsonrpc.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar messageId = 1;\n\n/// Should be called to valid json create payload object\n/// @param method of jsonrpc call, required\n/// @param params, an array of method params, optional\n/// @returns valid jsonrpc payload object\nvar toPayload = function (method, params) {\n    if (!method)\n        console.error('jsonrpc method should be specified!');\n\n    return {\n        jsonrpc: '2.0',\n        method: method,\n        params: params || [],\n        id: messageId++\n    }; \n};\n\n/// Should be called to check if jsonrpc response is valid\n/// @returns true if response is valid, otherwise false \nvar isValidResponse = function (response) {\n    return !!response &&\n        !response.error &&\n        response.jsonrpc === '2.0' &&\n        typeof response.id === 'number' &&\n        response.result !== undefined; // only undefined is not valid json object\n};\n\n/// Should be called to create batch payload object\n/// @param messages, an array of objects with method (required) and params (optional) fields\nvar toBatchPayload = function (messages) {\n    return messages.map(function (message) {\n        return toPayload(message.method, message.params);\n    }); \n};\n\nmodule.exports = {\n    toPayload: toPayload,\n    isValidResponse: isValidResponse,\n    toBatchPayload: toBatchPayload\n};\n\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file eth.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar utils = require('../utils/utils');\n\n/// @returns an array of objects describing web3.eth api methods\nvar methods = [\n    // { name: 'getBalance', call: 'eth_balanceAt', outputFormatter: formatters.convertToBigNumber},\n];\n\n/// @returns an array of objects describing web3.eth api properties\nvar properties = [\n    { name: 'listening', getter: 'net_listening'},\n    { name: 'peerCount', getter: 'net_peerCount', outputFormatter: utils.toDecimal },\n];\n\n\nmodule.exports = {\n    methods: methods,\n    properties: properties\n};\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file qtsync.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n * @date 2014\n */\n\nvar QtSyncProvider = function () {\n};\n\nQtSyncProvider.prototype.send = function (payload) {\n    var result = navigator.qt.callMethod(JSON.stringify(payload));\n    return JSON.parse(result);\n};\n\nmodule.exports = QtSyncProvider;\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file requestmanager.js\n * @authors:\n *   Jeffrey Wilcke <jeff@ethdev.com>\n *   Marek Kotewicz <marek@ethdev.com>\n *   Marian Oancea <marian@ethdev.com>\n *   Fabian Vogelsteller <fabian@ethdev.com>\n *   Gav Wood <g@ethdev.com>\n * @date 2014\n */\n\nvar jsonrpc = require('./jsonrpc');\nvar c = require('../utils/config');\n\n/**\n * It's responsible for passing messages to providers\n * It's also responsible for polling the ethereum node for incoming messages\n * Default poll timeout is 1 second\n */\nvar requestManager = function() {\n    var polls = [];\n    var timeout = null;\n    var provider;\n\n    var send = function (data, callback) {\n        /*jshint maxcomplexity: 8 */\n\n        // FORMAT BASED ON ONE FORMATTER function\n        if(typeof data.inputFormatter === 'function') {\n            data.params = Array.prototype.map.call(data.params, function(item, index){\n                // format everything besides the defaultblock, which is already formated\n                return (!data.addDefaultblock || index+1 < data.addDefaultblock) ? data.inputFormatter(item) : item;\n            });\n\n        // FORMAT BASED ON the input FORMATTER ARRAY\n        } else if(data.inputFormatter instanceof Array) {\n            data.params = Array.prototype.map.call(data.inputFormatter, function(formatter, index){\n                // format everything besides the defaultblock, which is already formated\n                return (!data.addDefaultblock || index+1 < data.addDefaultblock) ? formatter(data.params[index]) : data.params[index];\n            });\n        }\n\n\n        var payload = jsonrpc.toPayload(data.method, data.params);\n        \n        if (!provider) {\n            console.error('provider is not set');\n            return null;\n        }\n\n        // HTTP ASYNC (only when callback is given, and it a HttpProvidor)\n        if(typeof callback === 'function' && provider.name === 'HTTP'){\n            provider.send(payload, function(result, status){\n\n                if (!jsonrpc.isValidResponse(result)) {\n                    if(typeof result === 'object' && result.error && result.error.message) {\n                        console.error(result.error.message);\n                        callback(result.error);\n                    } else {\n                        callback(new Error({\n                            status: status,\n                            error: result,\n                            message: 'Bad Request'\n                        }));\n                    }\n                    return null;\n                }\n\n                // format the output\n                callback(null, (typeof data.outputFormatter === 'function') ? data.outputFormatter(result.result) : result.result);\n            });\n\n        // SYNC\n        } else {\n            var result = provider.send(payload);\n\n            if (!jsonrpc.isValidResponse(result)) {\n                if(typeof result === 'object' && result.error && result.error.message)\n                    console.error(result.error.message);\n                return null;\n            }\n\n            // format the output\n            return (typeof data.outputFormatter === 'function') ? data.outputFormatter(result.result) : result.result;\n        }\n        \n    };\n\n    var setProvider = function (p) {\n        provider = p;\n    };\n\n    /*jshint maxparams:4 */\n    var startPolling = function (data, pollId, callback, uninstall) {\n        polls.push({data: data, id: pollId, callback: callback, uninstall: uninstall});\n    };\n    /*jshint maxparams:3 */\n\n    var stopPolling = function (pollId) {\n        for (var i = polls.length; i--;) {\n            var poll = polls[i];\n            if (poll.id === pollId) {\n                polls.splice(i, 1);\n            }\n        }\n    };\n\n    var reset = function () {\n        polls.forEach(function (poll) {\n            poll.uninstall(poll.id); \n        });\n        polls = [];\n\n        if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n        }\n        poll();\n    };\n\n    var poll = function () {\n        polls.forEach(function (data) {\n            // send async\n            send(data.data, function(error, result){\n                if (!(result instanceof Array) || result.length === 0) {\n                    return;\n                }\n                data.callback(result);\n            });\n        });\n        timeout = setTimeout(poll, c.ETH_POLLING_TIMEOUT);\n    };\n    \n    poll();\n\n    return {\n        send: send,\n        setProvider: setProvider,\n        startPolling: startPolling,\n        stopPolling: stopPolling,\n        reset: reset\n    };\n};\n\nmodule.exports = requestManager;\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file shh.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar formatters = require('./formatters');\n\n/// @returns an array of objects describing web3.shh api methods\nvar methods = function () {\n    return [\n    { name: 'post', call: 'shh_post', inputFormatter: formatters.inputPostFormatter },\n    { name: 'newIdentity', call: 'shh_newIdentity' },\n    { name: 'hasIdentity', call: 'shh_hasIdentity' },\n    { name: 'newGroup', call: 'shh_newGroup' },\n    { name: 'addToGroup', call: 'shh_addToGroup' },\n\n    // deprecated\n    { name: 'haveIdentity', call: 'shh_haveIdentity', newMethod: 'shh.hasIdentity' },\n    ];\n};\n\nmodule.exports = {\n    methods: methods\n};\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file signature.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\nvar web3 = require('../web3'); \nvar c = require('../utils/config');\n\n/// @param function name for which we want to get signature\n/// @returns signature of function with given name\nvar functionSignatureFromAscii = function (name) {\n    return web3.sha3(web3.fromAscii(name)).slice(0, 2 + c.ETH_SIGNATURE_LENGTH * 2);\n};\n\n/// @param event name for which we want to get signature\n/// @returns signature of event with given name\nvar eventSignatureFromAscii = function (name) {\n    return web3.sha3(web3.fromAscii(name));\n};\n\nmodule.exports = {\n    functionSignatureFromAscii: functionSignatureFromAscii,\n    eventSignatureFromAscii: eventSignatureFromAscii\n};\n\n",
    "/*\n    This file is part of ethereum.js.\n\n    ethereum.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    ethereum.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with ethereum.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/** @file watches.js\n * @authors:\n *   Marek Kotewicz <marek@ethdev.com>\n * @date 2015\n */\n\n/// @returns an array of objects describing web3.eth.filter api methods\nvar eth = function () {\n    var newFilter = function (args) {\n        return typeof args[0] === 'string' ? 'eth_newBlockFilter' : 'eth_newFilter';\n    };\n\n    return [\n    { name: 'newFilter', call: newFilter },\n    { name: 'uninstallFilter', call: 'eth_uninstallFilter' },\n    { name: 'getLogs', call: 'eth_getFilterLogs' }\n    ];\n};\n\n/// @returns an array of objects describing web3.shh.watch api methods\nvar shh = function () {\n    return [\n    { name: 'newFilter', call: 'shh_newFilter' },\n    { name: 'uninstallFilter', call: 'shh_uninstallFilter' },\n    { name: 'getLogs', call: 'shh_getMessages' }\n    ];\n};\n\nmodule.exports = {\n    eth: eth,\n    shh: shh\n};\n\n",
    "module.exports={\n    \"version\": \"0.1.3\"\n}",
    "var web3 = require('./lib/web3');\nweb3.providers.HttpProvider = require('./lib/web3/httpprovider');\nweb3.providers.QtSyncProvider = require('./lib/web3/qtsync');\nweb3.eth.contract = require('./lib/web3/contract');\nweb3.abi = require('./lib/solidity/abi');\n\nmodule.exports = web3;\n"
  ]
}